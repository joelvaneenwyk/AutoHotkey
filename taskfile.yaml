# yaml-language-server: $schema=https://taskfile.dev/schema.json
# cspell:ignore taskfile,vcpkg,msbuild,makefiles,deinit

version: '3'

vars:
  DEFAULT_CONFIG: Release
  DEFAULT_PLATFORM: x64
  DEFAULT_SOLUTION: AutoHotkeyx.sln
  PLATFORMS: [Win32, x64]
  CONFIGURATIONS:
    - Debug
    - Debug.dll
    - Release
    - Release.dll
    - Self-contained
    - Self-contained(debug)

tasks:
  default:
    cmds:
      - task: run

  run:
    deps: [msbuild]
    vars:
      TARGET_EXE: '{{ joinPath .TASKFILE_DIR "bin" .DEFAULT_CONFIG "AutoHotkey64.exe" }}'
    cmds:
      - cmd: echo "Running the application."
      - cmd: >-
          cmd.exe /D /E:ON /C
          "
          echo Starting '{{ shellQuote .TARGET_EXE }}' &&
          "{{ shellQuote .TARGET_EXE }}"
          "

  build-all-configurations:
    aliases: [all, check, lint, ci]
    silent: true
    cmds:
      - for: { var: CONFIGURATIONS }
        task: build-all-platforms
        vars: { CONFIG: '{{ .ITEM }}' }

  build-all-platforms:
    silent: true
    cmds:
      - for: { var: PLATFORMS }
        task: msbuild
        vars: { PLATFORM: '{{ .ITEM }}', CONFIG: '{{ .CONFIG }}' }

  msbuild:
    aliases: [build, b]
    silent: true
    vars:
      MSBUILD:
        sh: | # shell
          strings=("Preview" "Enterprise" "Professional" "Community")
          for str in "${strings[@]}"
          do
            result="C:/Program Files/Microsoft Visual Studio/2022/${str}/MSBuild/Current/Bin/amd64/MSBuild.exe"
            if [ -e "$result" ]; then
              echo "$result"
              break
            fi
          done
      MSBUILD_CONFIG: '{{ .CONFIG | default .DEFAULT_CONFIG }}'
      MSBUILD_SOLUTION: '{{ joinPath .TASKFILE_DIR (.SOLUTION | default .DEFAULT_SOLUTION) }}'
      MSBUILD_PLATFORM: '{{ .PLATFORM | default .DEFAULT_PLATFORM }}'
    cmds:
      - cmd: echo "Building '{{ .MSBUILD_SOLUTION }}' with '{{ .MSBUILD_CONFIG }}' configuration."
      - cmd: >-
          "{{fromSlash .MSBUILD}}"
          /m 
          /t:Build 
          /p:Configuration="{{.MSBUILD_CONFIG}}" 
          /p:Platform="{{.MSBUILD_PLATFORM}}" 
          "{{fromSlash .MSBUILD_SOLUTION}}"
  
  cmake-clang:
    aliases: [clang]
    cmds:
      - task: cmake-build
        vars: { CMAKE_PRESET: 'x64-windows-clang' }

  cmake-check:
    cmds:
      - task: cmake-build

  pre-commit:
    cmds:
      - git add --renormalize .
      - git reset --mixed
      - task revert-whitespace

  cmake-build:
    internal: true
    vars:
      CM_BUILD_CMAKE_PRESET: '{{ .CMAKE_PRESET | default "x64-windows" }}'
    cmds:
      - cmd: cmake --preset "{{ .CM_BUILD_CMAKE_PRESET }}"
      - cmd: cmake --build --preset "{{ .CM_BUILD_CMAKE_PRESET }}"
      - cmd: cmake --build --preset "{{ .CM_BUILD_CMAKE_PRESET }}" --target install

  revert-whitespace:
    cmds:
      - cmd: git diff -U0 -w --no-color | git apply --cached --ignore-whitespace --unidiff-zero -
